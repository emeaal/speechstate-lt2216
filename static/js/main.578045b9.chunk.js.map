{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","answer","pos","neg","help","menugrammar","meet","celeb","assistant","assistant_grammar","intent","confid_threshold","sayConfirm","context","checker","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","getHelp","helpmessage","entry","ENDSPEECH","noMatch","createAppointment","hist","deeperhist","history","hello","assign","counter","RECOGNISED","target","cond","recResult","utterance","confidence","actions","username","TIMEOUT","prompt1","prompt2","prompt3","ask","mainmenu","prompt","question","question_with_instructions","confirm_meeting","ask_confirm","confirm_search","lookup_intent","do_intent","findintent","invoke","id","src","event","fetch","Request","method","body","then","data","json","onDone","name","onError","intentsuccess","intentfailure","searchceleb","confirm_celeb","testermenu","findcelebrity","Heading","snippet","AbstractText","success","doyou","confirm_celebmeet","welcome","regards","confirm_regard","nomatch","confirm_day","durance","confirm_time","creationwholeday","creation_with_time","info","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","headers","rootElement","getElementById","ReactDOM"],"mappings":"+XAEA,SAASA,EAAIC,GACT,OAAOC,aAAK,SAACC,GAAD,MAA2B,CAAEC,KAAM,QAASC,MAAOJ,MAGnE,IAAMK,EAAgF,CAClF,WAAY,CAAEC,MAAO,4BACrB,SAAU,CAAEA,MAAO,wBACnB,UAAW,CAAEA,MAAO,UACpB,YAAa,CAAEA,MAAO,oBACtB,iBAAkB,CAAEA,MAAO,iBAC3B,QAAS,CAAEA,MAAO,QAClB,mBAAoB,CAACA,MAAO,mBAC5B,sBAAuB,CAAEA,MAAO,sBAChC,eAAgB,CAACA,MAAO,gBACxB,OAAU,CAAEA,MAAO,UACnB,WAAY,CAAEC,IAAK,WACnB,aAAc,CAAEA,IAAK,aACrB,YAAa,CAAEA,IAAK,YACpB,OAAU,CAAEA,IAAK,UACjB,SAAY,CAAEA,IAAK,YACnB,UAAW,CAAEA,IAAK,UAClB,YAAa,CAAEA,IAAK,YACpB,GAAM,CAAEC,KAAM,MACd,GAAM,CAAEA,KAAM,OACd,GAAM,CAAEA,KAAM,OACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,KACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,MACd,KAAM,CAAEA,KAAM,KACd,QAAS,CAAEA,KAAM,MACjB,QAAS,CAAEA,KAAM,MACjB,QAAS,CAAEA,KAAM,MACjB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,UAAW,CAAEA,KAAM,KACnB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,eAAgB,CAAEA,KAAM,MACxB,eAAgB,CAAEA,KAAM,MACxB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,cAAe,CAAEA,KAAM,KACvB,eAAgB,CAAEA,KAAM,MACxB,eAAgB,CAAEA,KAAM,MACxB,UAAW,CAAEA,KAAM,SAGjBC,EAA4E,CAC9E,OAAQ,CAAEC,IAAK,OACf,IAAO,CAAEA,IAAK,OACd,QAAS,CAAEA,IAAK,OAChB,MAAO,CAAEC,IAAK,MACd,aAAc,CAAED,IAAK,OACrB,UAAW,CAAEC,IAAK,MAClB,kBAAmB,CAAEA,IAAK,MAC1B,WAAc,CAAED,IAAK,OACrB,KAAQ,CAAEA,IAAK,OACf,cAAe,CAAEA,IAAK,OACtB,QAAS,CAAEE,KAAM,QACjB,eAAgB,CAAEA,KAAM,QACxB,gBAAiB,CAAEA,KAAM,SAGvBC,EAAwF,CAC1F,oBAAqB,CAAEC,KAAM,WAC7B,8BAA+B,CAAEA,KAAM,WACvC,QAAW,CAACA,KAAM,WAClB,oBAAqB,CAAEC,MAAO,oBAC9B,aAAc,CAAEA,MAAO,aACvB,sBAAuB,CAAEA,MAAO,sBAChC,yBAA0B,CAAEA,MAAO,0BACnC,aAAc,CAACC,UAAW,aAC1B,UAAW,CAACA,UAAW,aACvB,aAAc,CAACA,UAAW,aAC1B,sBAAuB,CAACA,UAAW,cAGjCC,EAA0D,CAC5D,UAAW,CAACC,OAAQ,UACpB,iBAAkB,CAACA,OAAQ,2BAC3B,KAAQ,CAACA,OAAQ,aACjB,qBAAsB,CAACA,OAAQ,qBAC/B,iBAAkB,CAACA,OAAQ,qBAC3B,sBAAuB,CAACA,OAAQ,sBAChC,mBAAoB,CAACA,OAAQ,sBAC7B,uBAAwB,CAACA,OAAQ,qBACjC,gBAAiB,CAACA,OAAQ,2BAC1B,oBAAqB,CAACA,OAAQ,0BAe5BC,EAAmB,GAEnBC,EAA2CnB,aAAK,SAACoB,GAAD,MAA0B,CAC5ElB,KAAM,QAASC,MAAM,uBAAD,OAAyBiB,EAAQC,QAAjC,SAGXC,EAAuD,CAChEC,QAAS,OACLC,OAAQ,CACRC,KAAM,CACFC,GAAI,CACAC,MAAO,SAGfC,KAAM,CACFF,GAAI,CACAG,UAAW,oBACXF,MAAO,sBAGfG,QAAS,CACLP,QAAS,cACTC,OAAQ,CACJO,YAAa,CACTC,MAAOlC,EAAI,8DACX4B,GAAI,CAAEO,UAAW,sCAI7BC,QAAS,CACLF,MAAOlC,EAAI,sDACX4B,GAAI,CAACO,UAAW,0CAEpBE,kBAAmB,CACfZ,QAAS,QACTC,OAAQ,CACJY,KAAM,CACFlC,KAAM,WAEVmC,WAAY,CACRnC,KAAM,UACNoC,QAAS,QAEbC,MAAO,CACHhB,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAaA,EAAQyB,UAAU,GAAGE,WAAa7B,GACrD8B,QAASR,YAAO,CAAES,SAAU,SAAC7B,GAAD,OAAaA,EAAQyB,UAAU,GAAGC,cAElE,CACIH,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJY,KAAM,CACFlC,KAAM,WAEViD,QAAS,CACLnB,MAAO,CAAClC,EAAI,iCACJ0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAS,MACvDf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,4BACJ0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAS,MACvDf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,2BACJ0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAS,MACvDf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACGtB,MAAOhC,YAAK,aAI5BuD,SAAU,CACNhC,QAAS,SACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,SAAWR,EAAYQ,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACtH8B,QAASR,YAAO,CAAE3B,KAAM,SAACO,GAAD,OAAaR,EAAYQ,EAAQyB,UAAU,GAAGC,WAAWjC,SAErF,CACI8B,OAAQ,kBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWR,EAAYQ,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACtH8B,QAASR,YAAO,CAAC3B,KAAM,SAACO,GAAD,OAAaR,EAAYQ,EAAQyB,UAAU,GAAGC,WAAWjC,SAEpF,CACI8B,OAAQ,cACRC,KAAM,SAACxB,GAAD,MAAa,UAAYR,EAAYQ,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACvH8B,QAASR,YAAO,CAAE1B,MAAO,SAACM,GAAD,OAAaR,EAAYQ,EAAQyB,UAAU,GAAGC,WAAWhC,UAEtF,CACI6B,OAAQ,iBACRC,KAAM,SAACxB,GAAD,MAAa,UAAYR,EAAYQ,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACvH8B,QAASR,YAAO,CAAE1B,MAAO,SAACM,GAAD,OAAaR,EAAYQ,EAAQyB,UAAU,GAAGC,WAAWhC,UAEtF,CACI6B,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,cAAgBR,EAAYQ,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAC3H8B,QAASR,YAAO,CAAEzB,UAAW,SAACK,GAAD,OAAaR,EAAYQ,EAAQyB,UAAU,GAAGC,WAAW/B,cAE1F,CACI4B,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,UACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,UACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,8BACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJgC,OAAQ,CACJxB,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,MAAD,OAAQiB,EAAQ6B,cAEzBvB,GAAI,CAAEO,UAAW,aAErBwB,SAAU,CACNzB,MAAO,CAAClC,EAAI,2BAA4B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACxFf,GAAI,CAAEO,UAAW,QAErByB,2BAA4B,CACxB1B,MAAO,CAAClC,EAAI,kHAAmH0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC/Kf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB2D,gBAAiB,CACbpC,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQP,QAC9Ca,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB6D,eAAgB,CACZtC,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQN,SAC9CY,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,cACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB8D,cAAe,CACXvC,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,YACRC,KAAM,SAACxB,GAAD,MAAa,WAAaJ,EAAkBI,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAC9H8B,QAASR,YAAO,CAAEvB,OAAQ,SAACG,GAAD,OAAaJ,EAAkBI,EAAQyB,UAAU,GAAGC,WAAW7B,WAE7F,CACI0B,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,0BAA2B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACvFf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,6BAA8B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC1Ff,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,+BAAgC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC5Ff,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB+D,UAAW,CACPxC,QAAS,aACTC,OAAQ,CACJwC,WAAY,CACRC,OAAQ,CACJC,GAAI,aACJC,IAAK,SAAC/C,EAASgD,GAAV,OAlTjBrE,EAkTgDqB,EAAQH,OAjT1EoD,MAAM,IAAIC,QAHI,gDAGa,CACvBC,OAAQ,OACRC,KAAK,aAAD,OAAezE,EAAf,SAEH0E,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UALN,IAAC5E,GAmTY6E,OAAQ,CACJjC,OAAQ,gBACRK,QAASR,YAAO,CAAEvB,OAAQ,SAACG,EAASgD,GAAV,OAAoBA,EAAMM,KAAKzD,OAAO4D,SAEpEC,QAAS,CACLnC,OAAQ,gBACRK,QAASR,YAAO,CAAEvB,OAAQ,SAACG,EAASgD,GAAV,OAAoBA,EAAMM,KAAKzD,OAAO4D,WAI5EE,cAAe,CACX/C,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,aAAD,OAAeiB,EAAQH,OAAvB,yEAELS,GAAI,CAACO,UAAW,kBAExB+C,cAAe,CACXhD,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,kBAAD,OAAoBiB,EAAQH,YAEjCS,GAAI,CAACO,UAAW,oBAIhCgD,YAAa,CACT1D,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,aACRC,KAAM,SAACxB,GAAD,OAAaA,EAAQyB,UAAU,GAAGE,WAAa7B,GACrD8B,QAASR,YAAO,CAAE1B,MAAO,SAACM,GAAD,OAAaA,EAAQyB,UAAU,GAAGC,cAE/D,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAaA,EAAQyB,UAAU,GAAGE,WAAa7B,GACrD8B,QAASR,YAAO,CAAE1B,MAAO,SAACM,GAAD,OAAaA,EAAQyB,UAAU,GAAGC,cAE/D,CACIH,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,8BAA+B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC3Ff,GAAI,CAACO,UAAW,QAEpBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,4CAA6C0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACzGf,GAAI,CAACO,UAAW,QAEpBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,mEAAoE0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChIf,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBkF,cAAe,CACX3D,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQN,SAC9CY,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,aACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBmF,WAAY,CACR5D,QAAS,gBACTC,OAAQ,CACJ4D,cAAe,CACXnB,OAAQ,CACJC,GAAI,gBACJC,IAAK,SAAC/C,EAASgD,GAAV,OAhblBrE,EAgbgDqB,EAAQN,MA/avEuD,MAAM,IAAIC,QAAJ,4DAAiEvE,EAAjE,2CAA+G0E,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UADzH,IAAC5E,GAiba6E,OAAQ,CACJjC,OAAQ,UACRK,QAASR,YAAO,CAAEnC,MAAO,SAACe,EAASgD,GAAV,MAAoB,gBAAkBA,EAAMM,KAAKW,SAASC,QAAS,SAAClE,EAASgD,GAAV,OAAoBA,EAAMM,KAAKa,iBAE/HT,QAAS,CACLnC,OAAQ,4CAI5B6C,QAAS,CACLxD,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,OAAD,OAASiB,EAAQkE,aAE1B5D,GAAI,CAAEO,UAAW,UAErBwD,MAAO,CACHlE,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,iCACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE/B,IAAK,SAACW,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWrC,QAE/E,CACIkC,OAAQ,+CACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE/B,IAAK,SAACW,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWrC,QAE/E,CACIkC,OAAQ,sCACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAC9B,IAAK,SAACU,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWpC,QAE9E,CACIiC,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,6BAA8B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC1Ff,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,uCAAwC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACpGf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,qDAAsD0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAClHf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,eAMxB0F,kBAAmB,CACfnE,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQX,OAC9CiB,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,MACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB2F,QAAS,CACL3D,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,8BAEVuB,GAAI,CAAEO,UAAW,YAErB2D,QAAS,CACLrE,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,MACRC,KAAM,SAACxB,GAAD,MAAa,UAAYhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACnH8B,QAASR,YAAO,CAAEnC,MAAO,SAACe,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWzC,UAElF,CACIsC,OAAQ,iBACRC,KAAM,SAACxB,GAAD,MAAa,UAAYhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACnH8B,QAASR,YAAO,CAAEnC,MAAO,SAACe,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWzC,UAElF,CACIsC,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,qBAAsB0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAClFf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,+BAAgC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC5Ff,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,uCAAwC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACpGf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxB6F,eAAgB,CACZtE,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQf,SAC9CqB,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,MACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBM,IAAK,CACDiB,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,QAAUhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACjH8B,QAASR,YAAO,CAAElC,IAAK,SAACc,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWxC,QAEhF,CACIqC,OAAQ,cACRC,KAAM,SAACxB,GAAD,MAAa,QAAUhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GACjH8B,QAASR,YAAO,CAAElC,IAAK,SAACc,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWxC,QAEhF,CACIqC,OAAQ,aAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,uBAAwB0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACpFf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,8CAA+C0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC3Gf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,2CAA4C0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACxGf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,WAEhB8F,QAAS,CACL9D,MAAOlC,EAAI,gCACX4B,GAAI,CAAEO,UAAW,UAI7B8D,YAAa,CACTxE,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQd,OAC9CoB,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBgG,QAAS,CACLzE,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE/B,IAAK,SAACW,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWrC,QAE/E,CACIkC,OAAQ,OACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE9B,IAAK,SAACU,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWpC,QAE/E,CACIiC,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,+BAAgC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC5Ff,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,wCAAyC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MACrGf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,mEAAoE0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChIf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBO,KAAM,CACFgB,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,qBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAClH8B,QAASR,YAAO,CAAEjC,KAAM,SAACa,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWvC,SAEjF,CACIoC,OAAQ,eACRC,KAAM,SAACxB,GAAD,MAAa,SAAWhB,EAAQgB,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAClH8B,QAASR,YAAO,CAAEjC,KAAM,SAACa,GAAD,OAAahB,EAAQgB,EAAQyB,UAAU,GAAGC,WAAWvC,SAEjF,CACIoC,OAAQ,aAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAClC,EAAI,8BAA+B0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC3Ff,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAClC,EAAI,mCAAoC0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChGf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAClC,EAAI,8CAA+C0C,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAC3Gf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,WAEhB8F,QAAS,CACL9D,MAAOlC,EAAI,iCACX4B,GAAI,CAAEO,UAAW,UAI7BgE,aAAc,CACV1E,QAAS,cACTS,MAAOQ,YAAO,CAAEnB,QAAS,SAACD,GAAD,OAAaA,EAAQb,QAC9CmB,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,qBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,gBACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE3E,CACIH,OAAQ,sBAIpBnB,OAAQ,CACJoC,YAAa,CACT5B,MAAOb,EACPO,GAAI,CAACO,UAAW,QAEpBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBkG,iBAAkB,CACd3E,QAAS,UACTS,MAAOQ,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,KACvDf,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,OACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE/B,IAAK,SAACW,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWrC,QAE/E,CACIkC,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KAAO1B,EAAQyB,UAAU,GAAGE,WAAa7B,GAChH8B,QAASR,YAAO,CAAE9B,IAAK,SAACU,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWpC,QAE/E,CACIiC,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,6CAAD,OAA+CiB,EAAQf,MAAvD,eAAmEe,EAAQd,IAA3E,SAETkC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,oCAAD,OAAsCiB,EAAQf,MAA9C,eAA0De,EAAQd,IAAlE,SAETkC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,mDAAD,OAAqDiB,EAAQf,MAA7D,eAAyEe,EAAQd,IAAjF,6CAETkC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAGrBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBmG,mBAAoB,CAChB5E,QAAS,UACTG,GAAI,CACAgB,WAAY,CACR,CACIC,OAAQ,mBACRC,KAAM,SAACxB,GAAD,MAAa,SAAWZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,MAE5E,CACIH,OAAQ,OACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KACvEE,QAASR,YAAO,CAAE/B,IAAK,SAACW,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWrC,QAE/E,CACIkC,OAAQ,UACRC,KAAM,SAACxB,GAAD,MAAa,QAAUZ,EAAOY,EAAQyB,UAAU,GAAGC,YAAc,KACvEE,QAASR,YAAO,CAAE9B,IAAK,SAACU,GAAD,OAAaZ,EAAOY,EAAQyB,UAAU,GAAGC,WAAWpC,QAE/E,CACIiC,OAAQ,qBAGhBO,QAAS,CACL,CACIP,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,WACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,UAE/B,CACIE,OAAQ,gBACRC,KAAM,SAACxB,GAAD,OAAiC,IAApBA,EAAQqB,YAIvCjB,OAAQ,CACJ2B,QAAS,CACLnB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,6CAAD,OAA+CiB,EAAQf,MAAvD,eAAmEe,EAAQd,IAA3E,eAAqFc,EAAQb,KAA7F,SAETiC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAErBmB,QAAS,CACLpB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,oCAAD,OAAsCiB,EAAQf,MAA9C,eAA0De,EAAQd,IAAlE,eAA4Ec,EAAQb,KAApF,SAETiC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAErBoB,QAAS,CACLrB,MAAO,CAAChC,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QACNC,MAAM,8CAAD,OAAgDiB,EAAQf,MAAxD,eAAoEe,EAAQd,IAA5E,eAAsFc,EAAQb,KAA9F,+CAETiC,YAAO,CAACC,QAAS,SAACrB,GAAD,OAAaA,EAAQqB,QAAU,MAChDf,GAAI,CAAEO,UAAW,QAErBqB,IAAK,CACDtB,MAAOhC,YAAK,aAIxBoG,KAAM,CACFpE,MAAOhC,aAAK,SAACoB,GAAD,MAAc,CACtBlB,KAAM,QACNC,MAAM,qCAEVuB,GAAI,CAAEO,UAAW,sB,4CC3mC7BjC,EAAiBgD,IAAjBhD,KAAMqG,EAAWrD,IAAXqD,OAGRC,EAAS,cAEfC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAIZ,IAEMC,EAAUC,YAAmC,CAC/CzC,GAAI,OACJhE,KAAM,WACNsB,OAAQ,CACJoF,GAAG,eACItF,GAGPuF,OAAQ,CACJtF,QAAS,OACTC,OAAQ,CACJI,KAAM,CACFF,GAAI,CACAC,MAAO,CACHgB,OAAQ,WACRK,QAAS,CACLR,YAAO,CACHsE,SAAU,SAACC,GAAD,OACN,IAAMC,OAAeC,cAAiBD,OAAeE,uBAE7D,SAAC9F,GAAD,OACI+F,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IACxC7C,MAAK,SAAS8C,GAAUnG,EAAQ0F,SAASU,wBAAwBD,WAK1FE,SAAU,CACNxD,OAAQ,CACJC,GAAI,wBACJC,IAAK,SAAC4C,EAAMW,GAAP,OAAgBC,KACrB/C,OAAQ,CACJ5B,QAAS,CACLR,aAAO,SAACvC,EAAUmE,GAAY,MAAO,CAAEwD,wBAAyBxD,EAAMM,SACtE,eACJ/B,OAAQ,eAEZmC,QAAS,CACLnC,OAAQ,UAIpBkF,YAAa,CACT5D,OAAQ,CACJC,GAAI,UACJC,IAAK,SAAC/C,EAAS0G,GAAV,OAAqB,SAACC,EAAUC,GACjC,IAAMC,EAAWC,IAA8B,CAC3CC,aAAc/G,EAAQ0F,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoBlH,EAAQwG,2BAG5BW,EAA8CN,EAA9CM,gBAAiBC,EAA6BP,EAA7BO,yBACzBpH,EAAQqH,IAAMF,EACdnH,EAAQsH,aAAeF,EACvBpH,EAAQqH,IAAIE,iBAAiB,iBAAiB,WAC1CvH,EAAQqH,IAAIpC,SACZ,IAAMuC,EAASxH,EAAQqH,IAAII,YACvBC,EAAUC,OAAO,QAAS,KAE1BD,EAAUC,OAAOC,QAAiC,KAEtD,IAAMC,EAAQL,EAAOM,MAAK,SAACC,GAAD,OAAYL,EAAQM,KAAKD,EAAEtE,SACjDoE,GACA7H,EAAQ6H,MAAQA,EAChBlB,EAAS,eAETsB,QAAQC,MAAR,oDAA2DR,IAC3Df,EAAS,oBAKzBrG,GAAI,CACAG,UAAW,OACX0H,UAAW,SAGnB9H,KAAM,CACFC,GAAI,CACA8H,OAAQ,cACRC,MAAO,CACH9G,OAAQ,WACRK,QAASR,aAAO,SAACvC,EAAUmE,GAAY,MAAO,CAAEsF,UAAWtF,EAAMjE,aAI7EwJ,YAAa,CACTpI,QAAS,UACTqI,KAAM,UACNlI,GAAI,CACAmI,UAAW,CACP7G,QAAS,CAAC,eACNR,aAAO,SAACvC,EAAUmE,GACd,MAAO,CACHvB,UAAWuB,EAAMjE,WAG7BwC,OAAQ,UAEZD,WAAY,OACZoH,OAAQ,OACRnI,MAAO,UAEXH,OAAQ,CACJuI,QAAS,CACL/H,MAAO,CACH,WACAhC,EACI,CAAEE,KAAM,WACR,CAAE8J,MAAO,SAAC5I,GAAD,OAAc,KAAOA,EAAQ6I,cAjHjD,KAiHqF/F,GAAI,aAEtFxC,GAAI,CACAwB,QAAS,oBACTgH,YAAa,cAEjBN,KAAMvD,EAAO,YAEjB8D,WAAY,GAEZC,MAAO,CACHpI,MAAOhC,EAAK,eAEhBqK,MAAO,CACHrI,MAAO,UACPN,GAAI,CAAEC,MAAO,cAIzB2I,SAAU,CACNtI,MAAO,WACPN,GAAI,CACAO,UAAW,OACX6H,OAAQ,OACRnI,MAAO,CAAEgB,OAAQ,OAAQK,QAAShD,EAAK,eAE3C4J,KAAM,WAEVW,KAAM,OAKlB,CACIvH,QAAS,CACLwH,aAAc,SAACpJ,GAEXiI,QAAQoB,IAAI,KAAMrJ,EAAQyB,UAAU,GAAlB,UAAmCzB,EAAQyB,UAAU,GAAlB,aAEzD6H,UAAW,SAACtJ,GAERiI,QAAQoB,IAAI,kBAAoBrJ,EAAQuJ,QAAQ1J,OAAO4D,UAWjE+F,EAAiB,SAACC,GACpB,IAAIC,IAAeD,EAAME,MAAM3J,QAAQ4J,qBAAuB,CAAC,KAC1D9B,MAAK,SAAC+B,GAAD,MAA8B,SAAjBA,EAAGC,cAAyB,IAAI/K,MACnDgL,IAAgBN,EAAME,MAAM3J,QAAQ4J,qBAAuB,CAAC,KAC3D9B,MAAK,SAAC+B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAI/K,MACpDiL,EAAc,SAClB,QAAQ,GACJ,KAAKP,EAAME,MAAMM,QAAQ,CAAExE,OAAQ,UAAagE,EAAME,MAAMM,QAAQ,CAAEzE,GAAI,SACtE,MACJ,KAAKiE,EAAME,MAAMM,QAAQ,CAAExE,OAAQ,CAAE8C,YAAa,WAC9CmB,EAAa,oBACb,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAExE,OAAQ,gBAC/BuE,EAAc,qBACdN,EAAaA,GAAc,eAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAExE,OAAQ,aAC/BuE,EAAc,kBACdN,EAAaA,GAAc,cAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEzE,GAAI,SAI/B,KAAKiE,EAAME,MAAMM,QAAQ,CAAEzE,GAAI,SAC3BkE,EAAa,kBACbM,EAAc,eACd,MACJ,QACIN,EAAaA,GAAc,OAEnC,OACI,sBAAKQ,UAAU,UAAf,UACI,wBAAQA,UAAU,SAAlB,SACKH,GACG,qBAAKhH,IAAKgH,EACNI,IAAKT,MAEjB,sBAAKQ,UAAU,SAAf,UACI,oCAAQpL,KAAK,SAASoL,UAAWF,EAC7BI,MAAO,IAAQX,IAEnB,qBAAKS,UAAU,cAAf,SACKR,WAMfW,EAAe,SAACZ,GAClB,IAAMa,EAAUb,EAAMc,YAAYzC,MAAK,SAAC+B,GAAD,MAA8B,SAAjBA,EAAGC,aAAsB/K,MACvEyL,GAAYf,EAAMc,YAAYzC,MAAK,SAAC+B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAI/K,MACvF,OACI,iDAAQmL,UAAU,QAAWT,GAA7B,cACKe,GACG,qBAAKzH,IAAKyH,EAAUL,IAAKG,IAC7B,qCAAaA,SAKzB,SAASG,IACL,MAAwBC,YAAWpF,EAAS,CACxCqF,UAAU,EACV/I,QAAS,CAELgJ,aAAcC,aAAS,SAAC7K,GACpB8K,SAAS1H,KAAKgH,MAAMW,WAAa/K,EAAQyB,UAAU,GAAGC,aAI1DsJ,SAAUH,aAAS,SAAC7K,GAChBA,EAAQiL,IAAIC,WAGhBC,QAASN,aAAS,SAAC7K,GACfA,EAAQiL,IAAIG,WAGhBC,SAAUR,aAAS,SAAC7K,GAChB,IAAM0B,EAAY,IAAI1B,EAAQsH,aAAatH,EAAQsI,WACnDL,QAAQoB,IAAI,KAAMrJ,EAAQsI,WAC1B5G,EAAUmG,MAAQ7H,EAAQ6H,MAC1BnG,EAAU4J,MAAQ,kBAAM1M,EAAK,cAC7BoB,EAAQqH,IAAIkE,MAAM7J,MAEtB8J,QAASX,aAAS,SAAC7K,GAEfA,EAAQqH,IAAIpC,YAEhBwG,YAAaZ,aAAS,SAAC7K,EAAS0G,GAC5B,IACMgF,EACIC,IAAgC,CAC9B5E,aAAc/G,EAAQ0F,SACtBsB,YAAa,CACTC,OAAQ/B,EACRgC,mBAAoBlH,EAAQwG,2BALtCkF,kBAQN1L,EAAQiL,IAAM,IAAIS,EAClB1L,EAAQiL,IAAIW,KAAOhE,QACnB5H,EAAQiL,IAAIY,YAAa,EACzB7L,EAAQiL,IAAIa,gBAAiB,EAC7B9L,EAAQiL,IAAIc,SAAW,SAAS/I,GAC5B,IAAIgJ,EAAShJ,EAAMiJ,QAAQ,GACvBD,EAAOE,QACPtN,EAAK,CACDE,KAAM,YAAaC,MACf,CAAC,CACG,UAAaiN,EAAO,GAAGG,WACvB,WAAcH,EAAO,GAAGrK,eAIpC/C,EAAK,CAAEE,KAAM,uBArDjC,mBAAOsN,EAAP,KAAgBxN,EAAhB,KA4DMyN,GAAiBD,EAAQpM,QAAQsM,yBAA2B,IAAIC,QAAO,SAACC,GAAD,OAAYA,EAAEC,sBACtFC,KACG,SAACF,EAAQG,GAAT,OACI,cAAC,EAAD,CAAchD,MAAOyC,EACjB7B,YAAaiC,EAAEC,mBAEfG,QAAS,kBAAMhO,EAAK,CAAEE,KAAM,SAAUC,MAAOyN,EAAEK,wBAD1CF,MAOb,OACI,sBAAKzC,UAAU,MAAf,UACI,cAAC,EAAD,CAAgBP,MAAOyC,EAAS7B,YAAa,GAAIqC,QAAS,kBAAMhO,EAAK,YACrE,qBAAKsL,UAAU,iBAAf,SACI,qBAAKA,UAAU,SAAf,SACKmC,SAS7B,IAAM9F,EAAwB,kBAC1BtD,MAAM,IAAIC,QAnUS,sEAmUe,CAC9BC,OAAQ,OACR2J,QAAS,CACL,4BAA6BlF,uCAEjCvE,MAAK,SAAAC,GAAI,OAAIA,EAAK3E,WAGpBoO,EAAcjC,SAASkC,eAAe,QAC5CC,SACI,cAACxC,EAAD,IACAsC,K","file":"static/js/main.578045b9.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"Dinner.\": { title: \"Dinner\" },\n    \"Business.\": { title: \"Business meeting\" },\n    \"Study session.\": { title: \"Study session\" },\n    \"Walk.\": { title: \"Walk\" },\n    \"Language course.\": {title: \"Language course\" },\n    \"Programming course.\": { title: \"Programming course\"},\n    \"Zoom meeting\": {title: \"Zoom meeting\" },\n    \"Monday\": { title: \"Monday\" },\n    \"Tuesday.\": { day: \"Tuesday\" },\n    \"Wednesday.\": { day: \"Wednesday\" },\n    \"Thursday.\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday.\": { day: \"Sunday\" },\n    \"Tomorrow.\": { day: \"tomorrow\"},\n    \"10\": { time: \"10\" },\n    \"11\": { time: \"11 \" },\n    \"12\": { time: \"12 \" },\n    \"1.\": { time: \"1 \" },\n    \"2.\": { time: \"2\" },\n    \"3.\": { time: \"3 \" },\n    \"4.\": { time: \"4 \" },\n    \"5.\": { time: \"5 \" },\n    \"6.\": { time: \"6 \" },\n    \"7.\": { time: \"7 \" },\n    \"8.\": { time: \"8 \" },\n    \"9.\": { time: \"9\" },\n    \"At 10\": { time: \"10\" },\n    \"At 11\": { time: \"11\" },\n    \"At 12\": { time: \"12\" },\n    \"At 1:00\": { time: \"1\" },\n    \"At 2:00\": { time: \"2\" },\n    \"At 3:00\": { time: \"3\" },\n    \"At 4:00\": { time: \"4\" },\n    \"At 5:00\": { time: \"5\" },\n    \"At 6:00\": { time: \"6\" },\n    \"At 7:00\": { time: \"7\" },\n    \"At 8:00\": { time: \"8\" },\n    \"At 9:00\": { time: \"9\" },\n    \"At 1:00 PM.\": { time: \"1\"},\n    \"At 2:00 PM.\": { time: \"2\"},\n    \"At 3:00 PM.\": { time: \"3\"},\n    \"At 4:00 PM.\": { time: \"4\"},\n    \"At 5:00 PM.\": { time: \"5\"},\n    \"At 6:00 PM.\": { time: \"6\"},\n    \"At 7:00 PM.\": { time: \"7\"},\n    \"At 8:00 PM.\": { time: \"8\"},\n    \"At 9:00 PM.\": { time: \"9\"},\n    \"At 10:00 PM.\": { time: \"10\"},\n    \"At 11:00 PM.\": { time: \"11\"},\n    \"At 6:00 AM.\": { time: \"6\"},\n    \"At 7:00 AM.\": { time: \"7\"},\n    \"At 8:00 AM.\": { time: \"8\"},\n    \"At 9:00 AM.\": { time: \"9\"},\n    \"At 10:00 AM.\": { time: \"10\"},\n    \"At 11:00 AM.\": { time: \"11\"},\n    \"At noon\": { time: \"noon\"},\n}\n\nconst answer: { [index: string]: { pos?: string, neg?: string, help?: string} } = {\n    \"Yes.\": { pos: \"Yes\" },\n    \"Yes\": { pos: \"Yes\" },\n    \"Okay.\": { pos: \"Yes\" },\n    \"No.\": { neg: \"No\" },\n    \"Of course.\": { pos: \"Yes\" },\n    \"No way.\": { neg: \"No\" },\n    \"Absolutely not.\": { neg: \"No\" },\n    \"Absolutely\": { pos: \"Yes\"},\n    \"Sure\": { pos: \"Yes\" },\n    \"Yes please.\": { pos: \"Yes\" },\n    \"Help.\": { help: \"Help\" },\n    \"I need help.\": { help: \"Help\" },\n    \"What do I do?\": { help: \"Help\" },\n}\n\nconst menugrammar: { [index: string]: {meet?: string, celeb?: string, assistant?: string }} = {\n    \"Create a meeting.\": { meet: \"Meeting\" },\n    \"I want to create a meeting.\": { meet: \"Meeting\" },\n    \"Meeting\": {meet: \"Meeting\"},\n    \"Meet a celebrity.\": { celeb: \"Meet a celebrity\" },\n    \"Celebrity.\": { celeb: \"celebrity\" },\n    \"Search for someone.\": { celeb: \"Search for someone\" },\n    \"Search for a celebrity\": { celeb: \"Search for a celebrity\" },\n    \"Assistant.\": {assistant: \"Assistant\"},\n    \"Intent.\": {assistant: \"Assistant\"},\n    \"Do intent.\": {assistant: \"Assistant\"},\n    \"Home assistant bot.\": {assistant: \"Assistant\"}\n}\n\nconst assistant_grammar: {[index: string]: {intent?: string}} = {\n    \"Vacuum.\": {intent: \"vacuum\"},\n    \"Move to trash.\": {intent: \"Throw this in the trash\"},\n    \"Give\": {intent: \"Give this\"},\n    \"Turn on the light.\": {intent: \"Turn on the light\"},\n    \"Turn on lights\": {intent: \"Turn on the light\"},\n    \"Turn off the light.\": {intent: \"Turn off the light\"},\n    \"Turn off lights.\": {intent: \"Turn off the light\"},\n    \"Turn off the lights.\": {intent: \"Turn of the light\"},\n    \"Ask oven warm\": {intent: \"See if the oven is warm\"},\n    \"Inform oven warm.\": {intent: \"Say that oven is warm\"}\n}\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1&kl=us_en`)).then(data => data.json())\n\nconst rasaurl = 'https://intentrecog.herokuapp.com/model/parse';\n\nconst nluRequest = (text: string) =>\n  fetch(new Request(rasaurl, {\n      method: 'POST',\n      body: `{\"text\": \"${text}\"}`\n  }))\n      .then(data => data.json());\n\nconst confid_threshold = 0.6  // confidence threshold set to 0.6, if below this, speech wont be recognized\n\nconst sayConfirm: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Did you mean to say ${context.checker}?`\n}))\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n        states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'createAppointment',\n                CLICK: 'createAppointment',\n            }\n        },\n        getHelp: { // can get called from any part of \"createAppointment\"\n            initial: 'helpmessage',\n            states: {\n                helpmessage: {\n                    entry: say(\"Listen to the instructions and make sure to speak clearly.\"),\n                    on: { ENDSPEECH: '#root.dm.createAppointment.hist' } // returns to same state as before help was called\n                }\n            }\n        },\n        noMatch: {\n            entry: say(\"I didn't understand, could you please repeat that?\"),\n            on: {ENDSPEECH: '#root.dm.createAppointment.deeperhist'} // returns to \"listens\" so user can repeat or rephrase their utterance\n        },\n        createAppointment: {\n            initial: 'hello',\n            states: {\n                hist: {\n                    type: 'history',\n                },\n                deeperhist: {\n                    type: 'history',\n                    history: 'deep',\n                },\n                hello: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'mainmenu',\n                                cond: (context) => context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ username: (context) => context.recResult[0].utterance }) \n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            },\n                            ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                        },\n                    states: {\n                        hist: {\n                            type: 'history',\n                        },\n                        prompt1: {\n                            entry: [say(\"Hello! What is your username?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt2: {\n                            entry: [say(\"Please say your username\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        prompt3: {\n                            entry: [say(\"What should I call you?\"), \n                                    assign({counter: (context) => context.counter +1})],\n                            on: { ENDSPEECH: 'ask' }\n                            },\n                        ask: {\n                                entry: send('LISTEN'),\n                            },\n                        }\n                    },\n                mainmenu: {\n                    initial: 'prompt',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'welcome',\n                                cond: (context) => \"meet\" in (menugrammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ meet: (context) => menugrammar[context.recResult[0].utterance].meet!})\n                            },\n                            {\n                                target: 'confirm_meeting',\n                                cond: (context) => \"meet\" in (menugrammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({meet: (context) => menugrammar[context.recResult[0].utterance].meet!}) \n                            },\n                            {\n                                target: 'searchceleb',\n                                cond: (context) => \"celeb\" in (menugrammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ celeb: (context) => menugrammar[context.recResult[0].utterance].celeb!})\n                            },\n                            {\n                                target: 'confirm_search',\n                                cond: (context) => \"celeb\" in (menugrammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ celeb: (context) => menugrammar[context.recResult[0].utterance].celeb!})\n                            },\n                            {\n                                target: 'lookup_intent',\n                                cond: (context) => \"assistant\" in (menugrammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ assistant: (context) => menugrammar[context.recResult[0].utterance].assistant!})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                            ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.question_with_instructions',\n                                cond: (context) => context.counter === 2\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({\n                                type: 'SPEAK',\n                                value: `Hi ${context.username}`\n                            })),\n                            on: { ENDSPEECH: 'question' },\n                        },\n                        question: {\n                            entry: [say(\"What do you want to do?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask'}\n                        },\n                        question_with_instructions: {\n                            entry: [say(\"You can create a meeting, search for someone or get help from your home assistant bot. What do you want to do?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                confirm_meeting: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.meet }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'welcome',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                confirm_search: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.celeb }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'searchceleb',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                lookup_intent: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'do_intent',\n                                cond: (context) => \"intent\" in (assistant_grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ intent: (context) => assistant_grammar[context.recResult[0].utterance].intent! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"What can I do for you?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"What can I help you with?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"What do you need help with?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                do_intent: {\n                    initial: 'findintent',\n                    states: {\n                        findintent: {\n                            invoke: {\n                                id: 'findintent',\n                                src: (context, event) => nluRequest(context.intent),\n                                onDone: {\n                                    target: 'intentsuccess',\n                                    actions: assign({ intent: (context, event) => event.data.intent.name})\n                                },\n                                onError: {\n                                    target: \"intentfailure\",\n                                    actions: assign({ intent: (context, event) => event.data.intent.name})\n                                }\n                            }\n                        },\n                        intentsuccess: {\n                            entry: send((context) => ({\n                                type: 'SPEAK',\n                                value: `Ok I will ${context.intent}. Please start the app again if you want me to do something else.`\n                                })),\n                                on: {ENDSPEECH: '#root.dm.init'}\n                        },\n                        intentfailure: {\n                            entry: send((context) => ({\n                                type: 'SPEAK',\n                                value: `Sorry, I can't ${context.intent}`\n                                })),\n                                on: {ENDSPEECH: '#root.dm.init'}\n                        }\n                    }\n                },\n                searchceleb: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'testermenu',\n                                cond: (context) => context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ celeb: (context) => context.recResult[0].utterance })\n                            },\n                            {\n                                target: 'confirm_celeb',\n                                cond: (context) => context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ celeb: (context) => context.recResult[0].utterance })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"Who are you searching for?\"), assign({counter: (context) => context.counter + 1})],\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        prompt2: {\n                            entry: [say(\"Please tell me who you are searching for\"), assign({counter: (context) => context.counter + 1})],\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        prompt3: {\n                            entry: [say(\"Tell me the name of a celebrity and I will look them up for you\"), assign({counter: (context) => context.counter + 1})],\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                confirm_celeb: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.celeb }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'testermenu',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                testermenu: {\n                    initial: 'findcelebrity',\n                    states: {\n                        findcelebrity: {\n                            invoke: {\n                                id: 'findcelebrity',\n                                src: (context, event) => kbRequest(context.celeb),\n                                onDone: {\n                                    target: 'success',\n                                    actions: assign({ title: (context, event) => \"meeting with \" + event.data.Heading, snippet: (context, event) => event.data.AbstractText }),\n                                },\n                                onError: {\n                                    target: '#root.dm.createAppointment.searchceleb'\n                                },\n                            },\n                        },\n                success: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `OK, ${context.snippet}`\n                    })),\n                    on: { ENDSPEECH: 'doyou' }\n                },\n                doyou: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: '#root.dm.createAppointment.day',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                            },\n                            {\n                                target: '#root.dm.createAppointment.confirm_celebmeet',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                            },\n                            {\n                                target: '#root.dm.createAppointment.mainmenu',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({neg: (context) => answer[context.recResult[0].utterance].neg!})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"Do you want to meet them?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Do you want to meet this celebrity?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"Do you want to create a meeting with this person?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n            },\n        },\n                confirm_celebmeet: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.pos }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'day',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                welcome: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Let's create a meeting!`,\n                    })),\n                    on: { ENDSPEECH: 'regards' }\n                },\n                regards: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'day',\n                                cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                            },\n                            {\n                                target: 'confirm_regard',\n                                cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"What is it about?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"What is your meeting about?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"What should your meeting be called?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                confirm_regard: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.title }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'day',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                day: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'durance',\n                                cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\n                            },\n                            {\n                                target: 'confirm_day',\n                                cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\n                            },\n                            {\n                                target: '.nomatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"On which day is it?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"On which day will this meeting take place?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"Please tell me the day of this meeting.\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, what day did you say?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                confirm_day: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.day }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'durance',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                durance: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'creationwholeday',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                            },\n                            {\n                                target: 'time',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"Will it take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"Will the meeting take the whole day?\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"Will the meeting take the whole day? You can say 'yes' or 'no'.\"), assign({counter: (context) => context.counter + 1}), ],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                time: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'creation_with_time',\n                                cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\n                            },\n                            {\n                                target: 'confirm_time',\n                                cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}) && context.recResult[0].confidence < confid_threshold,\n                                actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\n                            },\n                            {\n                                target: '.nomatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [say(\"What time is your meeting?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [say(\"What time will this meeting be?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [say(\"At what time will this meeting take place?\"), assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry, what time did you say?\"),\n                            on: { ENDSPEECH: 'ask' }\n                        }\n                    }\n                },\n                confirm_time: {\n                    initial: 'ask_confirm',\n                    entry: assign({ checker: (context) => context.time }),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: 'creation_with_time',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {})\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ]\n                    },\n                    states: {\n                        ask_confirm: {\n                            entry: sayConfirm,\n                            on: {ENDSPEECH: 'ask'}\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        }\n                    }\n                },\n                creationwholeday: {\n                    initial: 'prompt1',\n                    entry: assign({counter: (context) => context.counter = 0}),\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'info',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                            },\n                            {\n                                target: 'regards',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}) && context.recResult[0].confidence > confid_threshold,\n                                actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Should I create a meeting called ${context.title} on ${context.day}?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `The information I've gotten is a meeting titled ${context.title} on ${context.day}. Should I create a meeting for that?`,\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                creation_with_time: {\n                    initial: 'prompt1',\n                    on: {\n                        RECOGNISED: [\n                            {\n                                target: '#root.dm.getHelp',\n                                cond: (context) => \"help\" in (answer[context.recResult[0].utterance] || {}),\n                            },\n                            {\n                                target: 'info',\n                                cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}),\n                                actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                            },\n                            {\n                                target: 'regards',\n                                cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}),\n                                actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                            },\n                            {\n                                target: '#root.dm.noMatch'\n                            }\n                        ],\n                        TIMEOUT: [\n                            {\n                                target: '.prompt1',\n                                cond: (context) => context.counter === 0,\n                            },\n                            {\n                                target: '.prompt2',\n                                cond: (context) => context.counter === 1,\n                            },\n                            {\n                                target: '.prompt3',\n                                cond: (context) => context.counter === 2,\n                            },\n                            {\n                                target: '#root.dm.init',\n                                cond: (context) => context.counter === 3,\n                            },\n                        ],\n                    },\n                    states: {\n                        prompt1: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt2: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `Should I create a meeting called ${context.title} on ${context.day} at ${context.time}?`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        prompt3: {\n                            entry: [send((context) => ({\n                                type: 'SPEAK',\n                                value: `The information I have is a meeting titled ${context.title} on ${context.day} at ${context.time}. Should I create that meeting for you?`\n                            })),\n                            assign({counter: (context) => context.counter + 1})],\n                            on: { ENDSPEECH: 'ask' }\n                        },\n                        ask: {\n                            entry: send('LISTEN'),\n                        },\n                    }\n                },\n                info: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Your meeting has been created.`\n                    })),\n                    on: { ENDSPEECH: '#root.dm.init' }\n                }\n            },\n        },\n    },\n})\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointmentPlus\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (500 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence,\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}