{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","answer","pos","neg","menugrammar","meet","celeb","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","hello","RECOGNISED","target","actions","assign","username","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","ask","mainmenu","cond","question","testermenu","invoke","id","src","event","fetch","Request","then","data","json","onDone","Heading","snippet","AbstractText","onError","success","failure","doyou","nomatch","welcome","regards","durance","creationwholeday","creation_with_time","info","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.1474d502.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string } } = {\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\n    \"Lunch.\": { title: \"Lunch at the canteen\" },\n    \"Dinner.\": { title: \"Dinner\" },\n    \"Business.\": { title: \"Business meeting\" },\n    \"Study session.\": { title: \"Study session\" },\n    \"Walk.\": { title: \"Walk\" },\n    \"Language course.\": {title: \"Language course\" },\n    \"Programming course.\": { title: \"Programming course\"},\n    \"Zoom meeting\": {title: \"Zoom meeting\" },\n    \"Monday\": { title: \"Monday\" },\n    \"Tuesday.\": { day: \"Tuesday\" },\n    \"Wednesday.\": { day: \"Wednesday\" },\n    \"Thursday.\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday.\": { day: \"Sunday\" },\n    \"Tomorrow.\": { day: \"tomorrow\"},\n    \"10\": { time: \"10\" },\n    \"11\": { time: \"11 \" },\n    \"12\": { time: \"12 \" },\n    \"1.\": { time: \"1 \" },\n    \"2.\": { time: \"2\" },\n    \"3.\": { time: \"3 \" },\n    \"4.\": { time: \"4 \" },\n    \"5.\": { time: \"5 \" },\n    \"6.\": { time: \"6 \" },\n    \"7.\": { time: \"7 \" },\n    \"8.\": { time: \"8 \" },\n    \"9.\": { time: \"9\" },\n    \"At 10\": { time: \"10\" },\n    \"At 11\": { time: \"11\" },\n    \"At 12\": { time: \"12\" },\n    \"At 1:00\": { time: \"1\" },\n    \"At 2:00\": { time: \"2\" },\n    \"At 3:00\": { time: \"3\" },\n    \"At 4:00\": { time: \"4\" },\n    \"At 5:00\": { time: \"5\" },\n    \"At 6:00\": { time: \"6\" },\n    \"At 7:00\": { time: \"7\" },\n    \"At 8:00\": { time: \"8\" },\n    \"At 9:00\": { time: \"9\" },\n    \"At 1:00 PM.\": { time: \"1\"},\n    \"At 2:00 PM.\": { time: \"2\"},\n    \"At 3:00 PM.\": { time: \"3\"},\n    \"At 4:00 PM.\": { time: \"4\"},\n    \"At 5:00 PM.\": { time: \"5\"},\n    \"At 6:00 PM.\": { time: \"6\"},\n    \"At 7:00 PM.\": { time: \"7\"},\n    \"At 8:00 PM.\": { time: \"8\"},\n    \"At 9:00 PM.\": { time: \"9\"},\n    \"At 10:00 PM.\": { time: \"10\"},\n    \"At 11:00 PM.\": { time: \"11\"},\n    \"At 6:00 AM.\": { time: \"6\"},\n    \"At 7:00 AM.\": { time: \"7\"},\n    \"At 8:00 AM.\": { time: \"8\"},\n    \"At 9:00 AM.\": { time: \"9\"},\n    \"At 10:00 AM.\": { time: \"10\"},\n    \"At 11:00 AM.\": { time: \"11\"},\n    \"At noon\": { time: \"noon\"},\n}\n\nconst answer: { [index: string]: { pos?: string, neg?: string} } = {\n    \"Yes.\": { pos: \"Yes\" },\n    \"Okay.\": { pos: \"Yes\" },\n    \"No.\": { neg: \"No\" },\n    \"Of course.\": { pos: \"Yes\" },\n    \"No way\": { neg: \"No\" },\n    \"Absolutely not.\": { neg: \"No\" },\n    \"Absolutely\": { pos: \"Yes\"},\n    \"Sure\": { pos: \"Yes\" },\n    \"Yes please.\": { pos: \"Yes\" },\n}\n\nconst menugrammar: { [index: string]: {meet?: string, celeb?: string }} = {\n    \"Create a meeting.\": { meet: \"Meeting\" },\n    \"I want to create a meeting.\": { meet: \"Meeting\" },\n    \"Meet a celebrity\": { celeb: \"celebrity\" },\n    \"Celebrity\": { celeb: \"celebrity\" },\n}\n\nconst kbRequest = (text: string) =>\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1&kl=us_en`)).then(data => data.json())\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'idle',\n    states: {\n        idle: {\n            on: {\n                CLICK: 'init'\n            }\n        },\n        init: {\n            on: {\n                TTS_READY: 'hello',\n                CLICK: 'hello',\n            }\n        },\n        hello: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'mainmenu',\n                        actions: assign({ username: (context) => context.recResult[0].utterance })\n                    },\n                    ],\n                TIMEOUT: '.prompt'\n                },\n            states: {\n                prompt: {\n                    entry: say(\"What is your username?\"),\n                    on: { ENDSPEECH: 'ask' }\n                    },\n                    ask: {\n                        entry: send('LISTEN'),\n                    },\n                }\n            },\n        mainmenu: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'welcome',\n                        cond: (context) => \"meet\" in (menugrammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ meet: (context) => menugrammar[context.recResult[0].utterance].meet!})\n                    },\n                    {\n                        target: 'testermenu',\n                        actions: assign({ celeb: (context) => context.recResult[0].utterance })\n                    },\n                    ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Hi ${context.username}`\n                    })),\n                    on: { ENDSPEECH: 'question' },\n                },\n                question: {\n                    entry: say(\"What do you want to do?\"),\n                    on: { ENDSPEECH: 'ask'}\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n            }\n        },\n        testermenu: {\n            invoke: {\n                id: 'duck',\n                src: (context, event) => kbRequest(context.celeb),\n                onDone: {\n                    target: 'success',\n                    actions: assign({ title: (context, event) => \"meeting with \" + event.data.Heading, snippet: (context, event) => event.data.AbstractText }),\n                },\n                onError: {\n                    target: 'failure',\n                },\n            },\n        },\n        success: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `OK, ${context.snippet}`\n            })),\n            on: { ENDSPEECH: 'doyou' }\n        },\n        failure: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `${context.celeb} couldn't be found.`,\n            })),\n            on: { ENDSPEECH: 'mainmenu' }\n        },\n        doyou: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'day',\n                        cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                    },\n                    {\n                        target: 'mainmenu',\n                        cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({neg: (context) => answer[context.recResult[0].utterance].neg!})\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Do you want to meet them?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, what did you say?\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        welcome: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `Let's create a meeting!`,\n            })),\n            on: { ENDSPEECH: 'regards' }\n        },\n        regards: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'day',\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What is it about?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        day: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'durance',\n                        cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"On which day is it?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, what day did you say?\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        durance: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'creationwholeday',\n                        cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                    },\n                    {\n                        target: 'time',\n                        cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Will it take the whole day?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        time: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'creation_with_time',\n                        cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\n                        actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What time is your meeting?\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, what time did you say?\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        creationwholeday: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'info',\n                        cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                    },\n                    {\n                        target: 'regards',\n                        cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day}?`\n                    })),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        creation_with_time: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    {\n                        target: 'info',\n                        cond: (context) => \"pos\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ pos: (context) => answer[context.recResult[0].utterance].pos! })\n                    },\n                    {\n                        target: 'regards',\n                        cond: (context) => \"neg\" in (answer[context.recResult[0].utterance] || {}),\n                        actions: assign({ neg: (context) => answer[context.recResult[0].utterance].neg! })\n                    },\n                    {\n                        target: '.nomatch'\n                    }\n                ],\n                TIMEOUT: '.prompt'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: 'SPEAK',\n                        value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\n                    })),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n                nomatch: {\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\n                    on: { ENDSPEECH: 'ask' }\n                }\n            }\n        },\n        info: {\n            entry: send((context) => ({\n                type: 'SPEAK',\n                value: `Your meeting has been created.`\n            })),\n            on: { ENDSPEECH: 'init' }\n        }\n    },\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'init',\n            states: {\n                init: {\n                    on: {\n                        CLICK: {\n                            target: 'getToken',\n                            actions: [\n                                assign({\n                                    audioCtx: (_ctx) =>\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\n                                }),\n                                (context) =>\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\n                            ]\n                        }\n                    }\n                },\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                audioContext: context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'idle' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n\n            changeColour: asEffect((context) => {\n                document.body.style.background = context.recResult[0].utterance;\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            audioContext: context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}